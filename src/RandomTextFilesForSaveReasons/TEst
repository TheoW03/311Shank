//        for(int i = 0;i < this.data.length();i++){
//            char token = this.data.charAt(i);
//            if(token == ';'){
//                if(!numbre.equals("")){
//                    tokenData.add(numbre);
//                    numbre = "";
//                }
//                OPperLine = "";
//                lineNum++;
//            }
//            boolean errorState = false;
//            if(token != ' '){
//                if(tokenList.compare(token) != null) {
//                    if(token == '-'){
//                        if(numbre.equals("-")){
//                            tokenData.add(tokenList.compare(token));
//                            continue;
//                        }
//                        if(!numbre.equals("")){
//                            tokenData.add(numbre);
//                            numbre = "";
//                        }
//                        numbre += String.valueOf(token);
//
//                    }else{
//                        if(!numbre.equals("")){
//                            tokenData.add(numbre);
//                            numbre = "";
//                        }
//                        if(OPperLine.equals("")){
//                            OPperLine = tokenList.compare(token);
//                        }
//                        if(OPperLine.equals(tokenList.compare(token))){
//                            tokenData.add(tokenList.compare(token));
//                        }else{
//                           errorState = true;
//                        }
//
//                    }
//
//                }else if(tokenList.esNumbre(token)){
//                    numbre += String.valueOf(token);
//                }else if(token == '.'){
//                    //play with later
//                    if(esDeciamal){
//                        errorState = true;
//                    }
//                    if(data.charAt(i-1) != token && i >= 1 && tokenList.esNumbre(data.charAt(i-1))){
//                        numbre += String.valueOf(token);
//                        esDeciamal = true;
//                    }else{
//                        errorState=true;
//                    }
//
//                }else{
//                    errorState = true;
//                }
//            }else{
//                continue;
//            }
//
//            if(errorState){
//                throw new UnauthTokenException("line "+lineNum+" at char "+i+" token '"+token+"' is unauthorized");
//            }
//        }

saving incase of bugs

    //me being an idiot. LOL ignore it pls.

//    public Node parse2() {
//        try {
//
//            Node curr = parserMethodThis();
//            Node nextS = Next();
//
//            if (nextS instanceof MathOpNode) {
//                this.root = nextS;
//            }
//            if (curr == null || nextS == null) {
//                parse2();
//            }
//            System.out.println("current: " + curr.ToString() + "  next " + nextS.ToString() + " next one: " + tokens.get(0).toString());
//            root.left = nomeral(tokens.get(0));;
//            root.right = curr;
//            System.out.println(root.right.ToString() + " "+root.left.ToString());
//
//            if (left == null || curr instanceof MathOpNode) {
//                parse2();
//            }
//            return root;
//        } catch (Exception e) {
//            System.out.println(e);
//            return root;
//        }
//
//    }


//                switch (token){
//                    case '0':
//
//                }

//                if (number(token) != 11) {
//                    if (!buffer.equals("")) {
//                        tokenDataR.add(new Token(Token.OPTokens.NUMBER, buffer));
//                        buffer = "";
//                    }
//                    state = 1;
//                } else if (number(token) == -1) {
//                    state = 5;
//                } else {
//                    state = 3;
//
//                }else{
//
//                }

//                switch (state) {
//                    case 1: //es Operator
//                        System.out.println("state: "+state);
//                        switch (currentChar) {
//                            case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
//                                state = 3;
//                                buffer += currentChar;
//                                System.out.println("buffer: "+buffer);
//                                break;
//                            case '+':
//                                if(!buffer.equals("")){
//                                    tokenDataR.add(new Token(Token.OPTokens.NUMBER,buffer));
//                                    buffer = "";
//                                }
//                                System.out.println("plus: state1: ite"+i);
//                                state = 2;
//                                tokenDataR.add(new Token(Token.OPTokens.ADD, "+"));
//                                break;
//                            case '-':
//                                if(!buffer.equals("")){
//                                    tokenDataR.add(new Token(Token.OPTokens.NUMBER,buffer));
//                                    buffer = "";
//                                }
//                                state = 2;
//                                tokenDataR.add(new Token(Token.OPTokens.SUBTRACT, "-"));
//                                break;
//                            case '*':
//                                if(!buffer.equals("")){
//                                    tokenDataR.add(new Token(Token.OPTokens.NUMBER,buffer));
//                                    buffer = "";
//                                }
//                                tokenDataR.add(new Token(Token.OPTokens.MULTIPLY, "*"));
//                                break;
//                            case '/':
//                                if(!buffer.equals("")){
//                                    tokenDataR.add(new Token(Token.OPTokens.NUMBER,buffer));
//                                    buffer = "";
//                                }
//                                tokenDataR.add(new Token(Token.OPTokens.DIVIDE, "/"));
//                                break;
//                            case' ':
//                                tokenDataR.add(new Token(Token.OPTokens.ENDOFLINE, "/"));
//                                break;
//                        }
//                        break;
//                    case 2: //es negative or addition.
//                        System.out.println("state: "+state);
//                        switch (currentChar){
//                            case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
//                                state = 3;
//                                System.out.println("cond1 state: "+state);
////                                buffer +="-" + currentChar;
//                            case '+':
//                                tokenDataR.add(new Token(Token.OPTokens.ADD,"+"));
//                                System.out.println("cond2 state: "+state);
//                                break;
//                            case '-':
//                                tokenDataR.add(new Token(Token.OPTokens.SUBTRACT,"-"));
//                                System.out.println("cond3 state: "+state);
//                                break;
//                        }
//                        break;
//                    case 3: //nomeral.
//                        System.out.println("state: "+state);
//                        System.out.println("buffer: "+buffer);
//                        switch (currentChar) {
//                            case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
//                                buffer += String.valueOf(currentChar);
//                                System.out.println("cond1 state: "+state);
//                                break;
//                            case '+', '-','*','/',';':
//                                state = 1;
//                                System.out.println("cond2 state: "+state);
//                                System.out.println("char?: "+currentChar);
//                                break;
//                            case '.':
//                                state = 5;
//                                System.out.println("cond3 state: "+state);
//                                break;
//                        }
//                    case 5:
//                        buffer += String.valueOf(currentChar);
//                        state = 2;
//                        break;
//                    //decimal
//                    default:
//                        System.out.println("state: error"+state);
//                        throw new UnauthTokenException("line " + lineNum + " at char " + i +
//                                " token '" + currentChar +
//                                " is unauthorized");
//
//                }
//
//                if(token != ' '){ //ignore space
//                    //es Mathmatica state
//                    if(tokenList.compare(token) != null) {
//                        //subract
//                        if(token == '-'){
//                            if(checkIfNOpISRpeated >= 2){ //if 2---3
//                                errorState=true;
//                            }
//                            //somehow works. I made this really cheeky :')
//                            if(!numbre.equals("")){ //break numbre
//                                tokenDataR.add(new Token(Token.OPTokens.NUMBER, numbre));
//                                numbre = "";
//                            }
//                            if(checkIfNOpISRpeated == 0){ //if Its 2-3
//                                checkIfNOpISRpeated++;
//                                tokenDataR.add(new Token(token,tokenList.compare(token)));
//                                i++;
//                                continue;
//                            }
//
//                            numbre += String.valueOf(token); //adds
//                            checkIfNOpISRpeated++;
//
//                        }else{ //if +*/
//                            if(token == '('){
//                                tokenDataR.add(new Token(token,tokenList.compare(token)));
//                                i++;
//                                continue;
//                            }
//
//                            if(checkIfOPRepeated >= 2 && token != ')'){ //checks for 2***3 or 2++4
//                                errorState=true;
//                            }
//                            checkIfOPRepeated++;
//                            checkIfNOpISRpeated++;
//                            if(!numbre.equals("")){ //check if being used in eq
//                                tokenDataR.add(new Token(Token.OPTokens.NUMBER, numbre));
//                                numbre = "";
//                            }
//                            if(OPperLine.equals("") &&  token != ')'){  //checks for 2+*3
//                                OPperLine = tokenList.compare(token);
//                            }
//                            if(token == ')'){
//                                tokenDataR.add(new Token(token,tokenList.compare(token)));
//                                i++;
//                                continue;
//                            }
//                            if(OPperLine.equals(tokenList.compare(token) ) ){ //adds to list
//                                tokenDataR.add(new Token(token,tokenList.compare(token)));
//                            }else{
//                                errorState = true;
//                            }
//
//                        }
//
//                    }else if(tokenList.esNumbre(token)){ //123
//                        checkIfNOpISRpeated = 0;
//                        checkIfOPRepeated = 0;
//                        OPperLine = "";
//                        numbre += String.valueOf(token);
//                    }else if(token == '.'){ //decimal
//                        checkIfNOpISRpeated = 0;
//                        checkIfOPRepeated = 0;
//                        //play with later
//                        if(esDeciamal){ ///1.2.34.
//                            errorState = true;
//                        }
//                        if(dataTokensLine.charAt(i-1) != token && i >= 1 && tokenList.esNumbre(dataTokensLine.charAt(i-1))){
//                            numbre += String.valueOf(token);
//                            esDeciamal = true;
//                        }else{
//                            errorState=true;
//                        }
//
//                    }else{
//                        errorState = true;
//                    }
//
//                }else{
//                    i++;
//                    continue;
//                }
//                if(errorState){ //error throws exception
//                    throw new UnauthTokenException("line "+lineNum+" at char "+i+" token '"+token+"' is unauthorized");
//                }